<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= form.title %></title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Google Fonts - Dynamically load the selected font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  
  <!-- Load all Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Open+Sans:wght@300;400;600;700&family=Lato:wght@300;400;700&family=Montserrat:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&family=Raleway:wght@300;400;500;600;700&family=Nunito:wght@300;400;600;700&family=Source+Sans+Pro:wght@300;400;600;700&family=PT+Sans:wght@400;700&family=Oswald:wght@300;400;500;600;700&family=Merriweather:wght@300;400;700&family=Ubuntu:wght@300;400;500;700&family=Playfair+Display:wght@400;500;600;700&family=Quicksand:wght@300;400;500;600;700&family=Rubik:wght@300;400;500;600;700&family=Work+Sans:wght@300;400;500;600;700&family=Noto+Sans:wght@300;400;500;600;700&family=Nunito+Sans:wght@300;400;600;700&family=Cabin:wght@400;500;600;700&family=Josefin+Sans:wght@300;400;500;600;700&family=Comfortaa:wght@300;400;500;600;700&family=Bitter:wght@300;400;500;600;700&family=Crimson+Text:wght@400;600;700&family=Libre+Baskerville:wght@400;700&family=Karla:wght@300;400;500;600;700&family=Fira+Sans:wght@300;400;500;600;700&family=Mulish:wght@300;400;500;600;700&family=Barlow:wght@300;400;500;600;700&family=Dancing+Script:wght@400;500;600;700&family=Pacifico&display=swap" rel="stylesheet">
  
  <script>
    // Helper function to darken a color for hover states
    function adjustColor(color, amount) {
      return '#' + color.replace(/^#/, '').replace(/../g, color => ('0'+Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));
    }
    
    // Function to load a specific Google Font dynamically
    function loadGoogleFont(fontFamily) {
      // Extract the font name from the font family string
      const fontName = fontFamily.split(',')[0].replace(/['"]/g, '');
      console.log('Loading font:', fontName);
      
      // Create a link element for the Google Font
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = `https://fonts.googleapis.com/css2?family=${fontName.replace(/ /g, '+')}:wght@300;400;500;700&display=swap`;
      document.head.appendChild(link);
    }
  </script>
  <style>
    /* Set the font family on the html and body elements */
    html, body {
      font-family: <%= form.appearance && form.appearance.fontFamily ? form.appearance.fontFamily : 'Arial, sans-serif' %> !important;
    }
    
    body {
      background-color: #f8f9fa;
      padding: 20px;
      color: <%= form.appearance && form.appearance.textColor ? form.appearance.textColor : '#212529' %>;
    }
    
    /* Apply font to all elements */
    *, *::before, *::after {
      font-family: inherit !important;
    }
    
    /* Force font on all form elements */
    input, textarea, select, button, option, 
    .form-control, .form-select, .form-check-label, 
    .btn, h1, h2, h3, h4, h5, h6, p, span, div, label, 
    .form-text, .text-muted, .alert, .alert-heading {
      font-family: <%= form.appearance && form.appearance.fontFamily ? form.appearance.fontFamily : 'Arial, sans-serif' %> !important;
    }
    
    /* Fix for placeholder text */
    ::placeholder {
      font-family: <%= form.appearance && form.appearance.fontFamily ? form.appearance.fontFamily : 'Arial, sans-serif' %> !important;
    }
    
    .form-container {
      max-width: <%= form.appearance && form.appearance.width ? form.appearance.width : '800px' %>;
      margin: 0 auto;
      background-color: <%= form.appearance && form.appearance.backgroundColor ? form.appearance.backgroundColor : '#fff' %>;
      <% if (form.appearance && form.appearance.backgroundImage) { %>
      background-image: url('<%= form.appearance.backgroundImage %>');
      background-size: cover;
      background-position: center;
      <% } %>
      border-radius: <%= form.appearance && form.appearance.borderRadius ? form.appearance.borderRadius : '10px' %>;
      box-shadow: <%= form.appearance && form.appearance.boxShadow ? form.appearance.boxShadow : '0 0 20px rgba(0, 0, 0, 0.1)' %>;
      padding: 30px;
    }
    
    .form-header {
      margin-bottom: 30px;
      text-align: <%= form.appearance && form.appearance.headerAlignment ? form.appearance.headerAlignment : 'center' %>;
    }
    
    .form-footer {
      margin-top: 30px;
      text-align: <%= form.appearance && form.appearance.headerAlignment ? form.appearance.headerAlignment : 'center' %>;
    }
    
    .thank-you-message {
      display: none;
      text-align: center;
      padding: 20px;
    }
    
    .btn-primary {
      background-color: <%= form.appearance && form.appearance.primaryColor ? form.appearance.primaryColor : '#007bff' %>;
      border-color: <%= form.appearance && form.appearance.primaryColor ? form.appearance.primaryColor : '#007bff' %>;
    }
    
    .btn-outline-secondary {
      color: <%= form.appearance && form.appearance.secondaryColor ? form.appearance.secondaryColor : '#6c757d' %>;
      border-color: <%= form.appearance && form.appearance.secondaryColor ? form.appearance.secondaryColor : '#6c757d' %>;
    }
    
    <% if (form.appearance && form.appearance.buttonStyle === 'rounded') { %>
    .btn {
      border-radius: 50px;
    }
    <% } else if (form.appearance && form.appearance.buttonStyle === 'square') { %>
    .btn {
      border-radius: 0;
    }
    <% } %>
    
    /* Debug info */
    .debug-info {
      margin-top: 20px;
      padding: 10px;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 4px;
      font-size: 12px;
    }
    
    /* Font samples */
    .font-samples {
      margin-top: 20px;
      padding: 10px;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 4px;
    }
    
    .font-sample {
      margin-bottom: 10px;
      padding: 5px;
      border-bottom: 1px solid #dee2e6;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="form-container">
      <div class="form-header">
        <h1><%= form.title %></h1>
        <% if (form.description) { %>
          <p class="text-muted"><%= form.description %></p>
        <% } %>
      </div>
      
      <form id="publicForm" action="/api/engage/public/forms/submit/<%= form.slug %>" method="POST" enctype="application/x-www-form-urlencoded">
        <div id="formElements"></div>
        
        <div class="form-footer">
          <% if (form.settings.showResetButton) { %>
            <button type="reset" class="btn btn-outline-secondary me-2"><%= form.settings.resetButtonText || 'Reset' %></button>
          <% } %>
          
          <% if (form.settings.showSubmitButton !== false) { %>
            <button type="submit" class="btn btn-primary"><%= form.settings.submitButtonText || 'Submit' %></button>
          <% } %>
        </div>
      </form>
      
      <div id="thankYouMessage" class="thank-you-message">
        <div class="alert alert-success">
          <h4 class="alert-heading">Thank you!</h4>
          <p>Your form has been submitted successfully.</p>
          <% if (form.settings.redirectAfterSubmit && form.settings.redirectUrl) { %>
            <p>You will be redirected shortly...</p>
          <% } %>
        </div>
      </div>
      
      <!-- Debug info to show the current font family -->
      <div class="debug-info">
        <p>Current font family: <%= form.appearance && form.appearance.fontFamily ? form.appearance.fontFamily : 'Arial, sans-serif' %></p>
      </div>
      
      <!-- Font samples -->
      <div class="font-samples">
        <h5>Font Samples</h5>
        <div class="font-sample" style="font-family: 'Roboto', sans-serif;">Roboto: The quick brown fox jumps over the lazy dog</div>
        <div class="font-sample" style="font-family: 'Open Sans', sans-serif;">Open Sans: The quick brown fox jumps over the lazy dog</div>
        <div class="font-sample" style="font-family: 'Lato', sans-serif;">Lato: The quick brown fox jumps over the lazy dog</div>
        <div class="font-sample" style="font-family: 'Montserrat', sans-serif;">Montserrat: The quick brown fox jumps over the lazy dog</div>
        <div class="font-sample" style="font-family: 'Poppins', sans-serif;">Poppins: The quick brown fox jumps over the lazy dog</div>
        <div class="font-sample" style="font-family: 'Pacifico', cursive;">Pacifico: The quick brown fox jumps over the lazy dog</div>
      </div>
    </div>
  </div>
  
  <script>
    // Form data from server
    const formData = <%- JSON.stringify(form) %>;
    
    // Log the form appearance settings for debugging
    console.log('Form appearance settings:', formData.appearance);
    
    // Load the selected font
    if (formData.appearance && formData.appearance.fontFamily) {
      loadGoogleFont(formData.appearance.fontFamily);
    }
    
    // Track form view if analytics is enabled
    const analyticsEnabled = formData.settings && formData.settings.enableAnalytics !== false;
    if (analyticsEnabled) {
      // Send analytics data to the server
      fetch(`/api/engage/forms/${formData.id}/view`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          metadata: {
            referrer: document.referrer,
            screenSize: {
              width: window.innerWidth,
              height: window.innerHeight
            },
            userAgent: navigator.userAgent,
            language: navigator.language,
            timestamp: new Date().toISOString()
          }
        })
      }).catch(err => {
        console.error('Failed to send analytics data:', err);
      });
    }
    
    // Function to render form elements
    function renderFormElements() {
      const container = document.getElementById('formElements');
      const elements = formData.elements || [];
      
      elements.forEach(element => {
        const wrapper = document.createElement('div');
        wrapper.className = 'mb-3';
        
        let html = '';
        
        switch(element.type) {
          case 'text':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
              <input type="text" class="form-control" name="${element.id}" placeholder="${element.placeholder || ''}" ${element.required ? 'required' : ''}>
            `;
            break;
            
          case 'textarea':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
              <textarea class="form-control" name="${element.id}" rows="3" placeholder="${element.placeholder || ''}" ${element.required ? 'required' : ''}></textarea>
            `;
            break;
            
          case 'checkbox':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
            `;
            
            if (element.options && element.options.length) {
              element.options.forEach((option, index) => {
                html += `
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="${element.id}" value="${option}" id="${element.id}-option-${index}">
                    <label class="form-check-label" for="${element.id}-option-${index}">${option}</label>
                  </div>
                `;
              });
            }
            break;
            
          case 'radio':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
            `;
            
            if (element.options && element.options.length) {
              element.options.forEach((option, index) => {
                html += `
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="${element.id}" value="${option}" id="${element.id}-option-${index}" ${element.required ? 'required' : ''}>
                    <label class="form-check-label" for="${element.id}-option-${index}">${option}</label>
                  </div>
                `;
              });
            }
            break;
            
          case 'select':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
              <select class="form-select" name="${element.id}" ${element.required ? 'required' : ''}>
                <option value="">Select an option</option>
            `;
            
            if (element.options && element.options.length) {
              element.options.forEach(option => {
                html += `<option value="${option}">${option}</option>`;
              });
            }
            
            html += `</select>`;
            break;
            
          case 'date':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
              <input type="date" class="form-control" name="${element.id}" ${element.required ? 'required' : ''}>
            `;
            break;
            
          case 'file':
            html = `
              <label class="form-label">${element.label}${element.required ? '<span class="text-danger">*</span>' : ''}</label>
              ${element.description ? `<div class="form-text mb-1">${element.description}</div>` : ''}
              <input type="file" class="form-control" name="${element.id}" ${element.required ? 'required' : ''}>
            `;
            break;
        }
        
        wrapper.innerHTML = html;
        container.appendChild(wrapper);
      });
      
      // Apply font family to all dynamically created elements
      document.querySelectorAll('input, textarea, select, button, label, .form-text, .form-label, .form-check-label')
        .forEach(el => {
          el.style.fontFamily = formData.appearance && formData.appearance.fontFamily 
            ? formData.appearance.fontFamily 
            : 'Arial, sans-serif';
        });
    }
    
    // Handle form submission success
    <% if (form.settings.redirectAfterSubmit && form.settings.redirectUrl) { %>
    document.getElementById('publicForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Get form data
      const formElements = document.getElementById('formElements');
      const formData = new FormData(document.getElementById('publicForm'));
      const formDataObj = {};
      
      for (const [key, value] of formData.entries()) {
        formDataObj[key] = value;
      }
      
      // Send form submission to server
      fetch('/api/engage/public/forms/submit/<%= form.slug %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formDataObj)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Form submission failed');
        }
        return response.json();
      })
      .then(data => {
        // Track form submission if analytics is enabled
        if (analyticsEnabled) {
          fetch(`/api/engage/forms/${formData.id}/submit`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              metadata: {
                referrer: document.referrer,
                screenSize: {
                  width: window.innerWidth,
                  height: window.innerHeight
                },
                userAgent: navigator.userAgent,
                language: navigator.language,
                timestamp: new Date().toISOString()
              }
            })
          }).catch(err => {
            console.error('Failed to send analytics data:', err);
          });
        }
      // Show thank you message
      setTimeout(() => {
        document.getElementById('publicForm').style.display = 'none';
        document.getElementById('thankYouMessage').style.display = 'block';
        
        // Redirect after a delay
        setTimeout(() => {
          window.location.href = '<%= form.settings.redirectUrl %>';
        }, 3000);
      }, 100);
    });
    <% } %>
    
    // Initialize form
    renderFormElements();
    
    // Apply font family to all elements after rendering
    document.addEventListener('DOMContentLoaded', function() {
      const fontFamily = formData.appearance && formData.appearance.fontFamily 
        ? formData.appearance.fontFamily 
        : 'Arial, sans-serif';
      
      // Apply to all elements
      document.querySelectorAll('*').forEach(el => {
        if (el.tagName !== 'STYLE' && el.tagName !== 'SCRIPT') {
          el.style.fontFamily = fontFamily;
        }
      });
    });
  </script>
</body>
</html>
