generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String        @id @default(uuid())
  title         String?
  firstName     String
  lastName      String
  email         String        @unique
  password      String?
  phone         String?
  avatar        String?
  jobTitle      String?
  department    String?
  lastLogin     DateTime?
  invitedBy     String?
  invitedAt     DateTime?
  joinedAt      DateTime?
  status        UserStatus    @default(Pending)
  planId        String?       // Added: User's selected plan
  billingCompanyId String?    // Added: Company selected for billing
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roles         UserRole[]
  createdCompanies Company[]  @relation("CreatedBy")
  userCompanies UserCompany[]
  createdRoles  Role[]       @relation("RoleCreatedBy")
  createdInvoices Invoice[]  @relation("InvoiceCreatedBy")
  notifications Notification[]
  preferences   UserPreference?
  securitySettings SecuritySettings?
  plan          Plan?        @relation(fields: [planId], references: [id])  // Added: Relation to Plan
  billingCompany Company?    @relation("UserBillingCompany", fields: [billingCompanyId], references: [id]) // Added: Relation to billing Company
}

model SecuritySettings {
  id                  String   @id @default(uuid())
  userId              String   @unique
  twoFactorEnabled    Boolean  @default(false)
  twoFactorMethod     String?  // app, sms, email
  passwordLastChanged DateTime?
  lastSecurityAudit   DateTime?
  user               User     @relation(fields: [userId], references: [id])
}

model UserPreference {
  id                String   @id @default(uuid())
  userId            String   @unique
  theme             String   @default("Light")
  language          String   @default("English")
  dateFormat        String   @default("DD/MM/YYYY")
  timeFormat        String   @default("24h")
  timezone          String   @default("UTC")
  emailDigest       Boolean  @default(true)
  pushNotifications Boolean  @default(true)
  columnPreferences Json?    // Added: For storing column visibility/order
  user              User     @relation(fields: [userId], references: [id])
}

// Role and Permission Management
model Permission {
  id          String           @id @default(uuid())
  name        String
  code        String           @unique
  description String
  module      String
  accessLevel AccessLevel
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@index([module])
  @@index([accessLevel])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  scope       RoleScope
  status      RoleStatus       @default(Active)
  isCustom    Boolean          @default(true)
  isSystem    Boolean          @default(false)
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById String?
  createdBy   User?           @relation("RoleCreatedBy", fields: [createdById], references: [id])
  companyId   String?
  company     Company?        @relation(fields: [companyId], references: [id])
  permissions RolePermission[]
  users       UserRole[]

  @@index([scope])
  @@index([status])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Contact {
  id              String   @id @default(cuid())
  title           String
  firstName       String
  lastName        String
  email           String
  phone           String
  mobile          String?
  department      String?
  position        String
  type            String[]
  source          String?  // Lead source
  status          Status   @default(Active)
  lastContact     DateTime
  nextFollowUp    DateTime?
  socialProfiles  Json?    // Store social media profiles
  mailingAddress  String?
  otherAddress    String?
  timezone        String?  @default("UTC")
  preferredTime   String?  // Best time to contact
  tags            String[]
  notes           String?
  companyId       String
  estimatedValue  Float?   // Added: Estimated value of the contact
  currency        String   @default("EUR")  // Added: Currency for value
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id])
  assignedTo      String?  // User ID of assigned team member
  activities      Activity[] @relation("ContactActivities")
  proposals       Proposal[]
  pipelineStages  ContactPipelineStage[] // Added: Relation to pipeline stages
  deals           Deal[]   // Added: Relation to deals
  
  @@index([companyId])
  @@index([assignedTo])
  @@index([status])
}

model Company {
  id               String            @id @default(cuid())
  name             String
  legalName        String?
  registrationNumber String?
  vatNumber        String?
  email            String?
  phone            String?
  website          String?
  address          Json?
  industry         String?
  size             String?
  type             String?
  fiscalYearEnd    String?
  currency         String?
  notes            String?
  status           Status            @default(Active)
  isPrimary        Boolean           @default(false)
  isMyOrg          Boolean           @default(false)
  tags             String[]          @default([])
  logo             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdById      String
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  userCompanies    UserCompany[]
  roles            Role[]
  activities       Activity[]
  allotments       Allotment[]
  beneficialOwners BeneficialOwner[]
  boardMinutes     BoardMinute[]
  charges          Charge[]
  directors        Director[]
  meetings         Meeting[]
  primaryContact   PrimaryContact?
  shares           Share[]
  shareholders     Shareholder[]
  billingDetails   BillingDetails?
  invoices         Invoice[]         @relation("CompanyInvoices")
  payments         Payment[]         @relation("CompanyPayments")
  billingForUsers  User[]           @relation("UserBillingCompany")
  // CRM Relations
  contacts         Contact[]
  clients          Client[]
  organisations    Organisation[]
  pipelines        Pipeline[]
  automations      Automation[]
  products         Product[]
  proposals        Proposal[]
  proposalTemplates ProposalTemplate[]
  sectionTemplates SectionTemplate[]
  deals            Deal[]           // Added: Relation to deals
  // PIM Relations
  productCategories ProductCategory[]
  productFamilies   ProductFamily[]
  productAttributes ProductAttribute[]
}

model UserCompany {
  userId     String
  companyId  String
  role       String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@index([userId])
  @@index([companyId])
}


model ContactPipelineStage {
  id          String   @id @default(cuid())
  contactId   String
  pipelineId  String
  stageId     String
  enteredAt   DateTime @default(now())
  exitedAt    DateTime?
  notes       String?
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  pipeline    Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  stage       Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([pipelineId])
  @@index([stageId])
}

model Pipeline {
  id          String   @id @default(cuid())
  name        String
  description String?
  stages      Stage[]
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  contacts    ContactPipelineStage[]
  deals       Deal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
}

model Stage {
  id          String   @id @default(cuid())
  name        String
  order       Int
  color       String?  // For UI representation
  description String?
  pipelineId  String
  pipeline    Pipeline @relation(fields: [pipelineId], references: [id])
  contacts    ContactPipelineStage[]
  deals       Deal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([pipelineId])
}

model Deal {
  id              String   @id @default(cuid())
  name            String
  amount          Float
  stageId         String
  stage           Stage    @relation(fields: [stageId], references: [id])
  pipelineId      String
  pipeline        Pipeline @relation(fields: [pipelineId], references: [id])
  probability     Int      // Success probability percentage
  expectedCloseDate DateTime
  actualCloseDate DateTime?
  status          DealStatus @default(Open)
  priority        Priority   @default(Medium)
  contactId       String
  contact         Contact  @relation(fields: [contactId], references: [id])
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id])
  organisationId  String?
  organisation    Organisation? @relation(fields: [organisationId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notes           String?
  activities      Activity[] @relation("DealActivities")
  automations     Automation[]
  proposals       Proposal[]

  @@index([contactId])
  @@index([companyId])
  @@index([organisationId])
  @@index([stageId])
  @@index([pipelineId])
  @@index([status])
}

model Automation {
  id          String   @id @default(cuid())
  name        String
  description String?
  trigger     String   // e.g., "stage_change", "deal_amount_change"
  conditions  Json     // Conditions that must be met
  actions     Json     // Actions to perform
  isActive    Boolean  @default(true)
  deals       Deal[]
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
}

enum DealStatus {
  Open
  Won
  Lost
  OnHold
}

enum Priority {
  High
  Medium
  Low
}

// CRM Models
model Organisation {
  id              String   @id @default(cuid())
  name            String
  industry        String?
  subIndustry     String?  // More specific industry classification
  website         String?
  email           String?
  phone           String?
  fax             String?
  billingAddress  String?
  shippingAddress String?
  type            String[]
  status          Status   @default(Active)
  ownership       String?  // Public, Private, Subsidiary, etc.
  lastContact     DateTime?
  nextFollowUp    DateTime?
  annualRevenue   Float?
  employeeCount   Int?
  rating          Int?     // 1-5 star rating
  parentCompany   String?
  subsidiaries    String[]
  timezone        String?  @default("UTC")
  socialProfiles  Json?    // Store social media profiles
  tags            String[]
  notes           String?
  companyId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id])
  assignedTo      String?  // User ID of assigned team member
  deals           Deal[]   // Relation to deals
  activities      Activity[] @relation("OrganisationActivities")

  @@index([companyId])
  @@index([assignedTo])
  @@index([status])
  @@index([industry])
}

// PIM Models
model Product {
  id                String              @id @default(cuid())
  name              String
  description       String              @db.Text
  type              ProductType
  sku               String?
  status            Status              @default(Active)
  companyId         String
  company           Company             @relation(fields: [companyId], references: [id])
  tiers             ProductTier[]
  proposals         ProposalProduct[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  // PIM Relations
  categoryId        String?
  category          ProductCategory?    @relation(fields: [categoryId], references: [id])
  familyId          String?
  family            ProductFamily?      @relation(fields: [familyId], references: [id])
  attributeValues   ProductAttributeValue[]
  variants          ProductVariant[]    @relation("ParentProduct")
  parentId          String?
  parent            Product?            @relation("ParentProduct", fields: [parentId], references: [id])
  media             ProductMedia[]
  completeness      Int?                // Percentage of required attributes filled
  isVariant         Boolean             @default(false)
  variantAxis       String[]            // Attributes used for variants (e.g., ["size", "color"])
  
  @@index([companyId])
  @@index([type])
  @@index([categoryId])
  @@index([familyId])
  @@index([parentId])
  @@index([status])
}

model ProductTier {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  type        PlanType
  price       Float
  features    Json[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String
  code        String
  description String?           @db.Text
  parentId    String?
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  level       Int               @default(1)
  companyId   String
  company     Company           @relation(fields: [companyId], references: [id])
  products    Product[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([companyId, code])
  @@index([companyId])
  @@index([parentId])
}

model ProductFamily {
  id                String                @id @default(cuid())
  name              String
  code              String
  description       String?               @db.Text
  companyId         String
  company           Company               @relation(fields: [companyId], references: [id])
  products          Product[]
  attributeGroups   ProductAttributeGroup[]
  requiredAttributes ProductFamilyAttribute[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@unique([companyId, code])
  @@index([companyId])
}

model ProductAttributeGroup {
  id          String                @id @default(cuid())
  name        String
  code        String
  description String?               @db.Text
  order       Int                   @default(1)
  familyId    String
  family      ProductFamily         @relation(fields: [familyId], references: [id])
  attributes  ProductFamilyAttribute[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@unique([familyId, code])
  @@index([familyId])
}

model ProductAttribute {
  id                String                @id @default(cuid())
  name              String
  code              String
  type              AttributeType
  description       String?               @db.Text
  options           Json?                 // For select/multiselect attributes
  unit              String?               // For numeric attributes
  isLocalizable     Boolean               @default(false)
  isScopable        Boolean               @default(false) // For channel-specific values
  isUnique          Boolean               @default(false)
  isRequired        Boolean               @default(false)
  validationRules   Json?                 // Validation rules (min, max, regex, etc.)
  companyId         String
  company           Company               @relation(fields: [companyId], references: [id])
  attributeValues   ProductAttributeValue[]
  familyAttributes  ProductFamilyAttribute[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@unique([companyId, code])
  @@index([companyId])
  @@index([type])
}

model ProductFamilyAttribute {
  id              String                @id @default(cuid())
  familyId        String
  family          ProductFamily         @relation(fields: [familyId], references: [id])
  attributeId     String
  attribute       ProductAttribute      @relation(fields: [attributeId], references: [id])
  groupId         String?
  group           ProductAttributeGroup? @relation(fields: [groupId], references: [id])
  isRequired      Boolean               @default(false)
  order           Int                   @default(1)

  @@unique([familyId, attributeId])
  @@index([familyId])
  @@index([attributeId])
  @@index([groupId])
}

model ProductAttributeValue {
  id              String            @id @default(cuid())
  productId       String
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeId     String
  attribute       ProductAttribute  @relation(fields: [attributeId], references: [id])
  value           Json              // Store different types of values
  locale          String?           // For localizable attributes
  scope           String?           // For scopable attributes (e.g., channel)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([productId, attributeId, locale, scope])
  @@index([productId])
  @@index([attributeId])
}

model ProductVariant {
  id              String            @id @default(cuid())
  productId       String
  product         Product           @relation("ParentProduct", fields: [productId], references: [id], onDelete: Cascade)
  variantCode     String
  variantTitle    String
  variantValues   Json              // Variant-specific attribute values
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([productId, variantCode])
  @@index([productId])
}

model ProductMedia {
  id              String            @id @default(cuid())
  productId       String
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  type            MediaType
  url             String
  filename        String
  originalName    String
  mimeType        String
  size            Int
  width           Int?              // For images
  height          Int?              // For images
  title           String?
  description     String?           @db.Text
  alt             String?
  order           Int               @default(1)
  locale          String?           // For localized media
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([productId])
  @@index([type])
}

model Proposal {
  id          String   @id @default(cuid())
  name        String
  template    String?  // Template ID or null for custom
  content     Json     // Stored sections and content
  variables   Json?    // Dynamic variables
  status      Status   @default(Active)
  validUntil  DateTime?
  dealId      String?
  contactId   String?
  companyId   String
  products    ProposalProduct[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  deal        Deal?    @relation(fields: [dealId], references: [id])
  contact     Contact? @relation(fields: [contactId], references: [id])

  @@index([companyId])
  @@index([dealId])
  @@index([contactId])
}

model ProposalProduct {
  id          String   @id @default(cuid())
  proposalId  String
  productId   String
  planType    PlanType
  tierId      String   // Reference to the selected tier
  quantity    Int      @default(1)
  price       Float    // Price at time of proposal
  features    Json[]   // Features at time of proposal
  proposal    Proposal @relation(fields: [proposalId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@index([proposalId])
  @@index([productId])
}

model ProposalTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     Json
  isDefault   Boolean  @default(false)
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
}

model SectionTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  content     String   @db.Text
  type        String
  icon        String?
  isDefault   Boolean  @default(false)
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
}

enum PlanType {
  BASIC
  STANDARD
  PREMIUM
}

enum AttributeType {
  TEXT
  TEXTAREA
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  SELECT
  MULTISELECT
  PRICE
  IMAGE
  FILE
  REFERENCE
  METRIC
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

model Client {
  id            String   @id @default(cuid())
  name          String
  industry      String
  website       String
  email         String
  phone         String
  address       String
  type          String[]
  status        Status   @default(Active)
  lastContact   DateTime
  revenue       String?
  employeeCount Int?
  notes         String?
  companyId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
}

// Billing and Payments
model Plan {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  price       Float
  billingCycle String    // Monthly, Yearly, etc.
  features    String[]
  maxUsers    Int
  maxCompanies Int
  status      PlanStatus @default(Active)
  isCustom    Boolean    @default(false)
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       User[]     // Added: Users on this plan

  @@index([status])
}

model BillingDetails {
  id            String   @id @default(uuid())
  companyId     String   @unique
  address       String
  city          String
  state         String
  country       String
  postalCode    String
  taxId         String?
  currency      String   @default("USD")
  paymentTerms  Int      @default(30) // Days
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  paymentMethods PaymentMethod[]
}

model PaymentMethod {
  id              String   @id @default(uuid())
  billingDetailsId String
  type            String   // card, bank, etc.
  provider        String   // stripe, paypal, etc.
  lastFour        String?
  expiryDate      DateTime?
  isDefault       Boolean  @default(false)
  status          Status   @default(Active)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  billingDetails  BillingDetails @relation(fields: [billingDetailsId], references: [id])
}

model Invoice {
  id          String   @id @default(uuid())
  number      String   @unique
  companyId   String
  amount      Float
  currency    String
  status      InvoiceStatus @default(Draft)
  dueDate     DateTime
  paidDate    DateTime?
  items       Json
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  company     Company  @relation("CompanyInvoices", fields: [companyId], references: [id])
  payments    Payment[]
}

model Payment {
  id          String   @id @default(uuid())
  invoiceId   String
  companyId   String
  amount      Float
  currency    String
  method      String
  status      PaymentStatus
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  company     Company  @relation("CompanyPayments", fields: [companyId], references: [id])
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // email, push, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

// Existing Statutory Models
model Director {
  id                 String         @id @default(cuid())
  title              String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  nationality        String
  address            String
  appointmentDate    DateTime
  resignationDate    DateTime?
  directorType       String
  occupation         String
  otherDirectorships String
  shareholding       String
  status             DirectorStatus
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  companyId          String
  company            Company        @relation(fields: [companyId], references: [id])
}

model Shareholder {
  id                 String   @id @default(cuid())
  title              String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  nationality        String
  address            String
  email              String
  phone              String
  ordinaryShares     Int
  preferentialShares Int
  dateAcquired       DateTime
  status             Status
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  companyId          String
  company            Company  @relation(fields: [companyId], references: [id])
}

model Share {
  id             String    @id @default(cuid())
  class          String
  type           ShareType
  nominalValue   Float
  currency       String
  votingRights   Boolean
  dividendRights Boolean
  transferable   Boolean
  totalIssued    Int
  status         Status
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  companyId      String
  company        Company   @relation(fields: [companyId], references: [id])
}

model BeneficialOwner {
  id                  String   @id @default(cuid())
  title               String
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  nationality         String
  address             String
  email               String
  phone               String
  natureOfControl     String[]
  ownershipPercentage Float
  registrationDate    DateTime
  status              Status
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  companyId           String
  company             Company  @relation(fields: [companyId], references: [id])
}

model Charge {
  id               String    @id @default(cuid())
  chargeId         String    @unique
  chargeType       String
  dateCreated      DateTime
  amount           Float
  currency         String
  chargor          String
  chargee          String
  description      String
  propertyCharged  String
  registrationDate DateTime
  status           String
  satisfactionDate DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  companyId        String
  company          Company   @relation(fields: [companyId], references: [id])
}

model Allotment {
  id                String        @id @default(cuid())
  allotmentId       String        @unique
  allotmentDate     DateTime
  shareClass        String
  numberOfShares    Int
  pricePerShare     Float
  currency          String
  allottee          String
  paymentStatus     PaymentStatus
  amountPaid        Float?
  paymentDate       DateTime?
  certificateNumber String?
  status            Status
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  companyId         String
  company           Company       @relation(fields: [companyId], references: [id])
}

model Resolution {
  id            String            @id @default(cuid())
  title         String
  type          ResolutionType?
  description   String
  outcome       ResolutionOutcome
  proposedBy    String?
  secondedBy    String?
  meetingId     String?
  boardMinuteId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  boardMinute   BoardMinute?      @relation(fields: [boardMinuteId], references: [id])
  meeting       Meeting?          @relation(fields: [meetingId], references: [id])
}

model Meeting {
  id             String         @id @default(cuid())
  meetingId      String         @unique
  meetingDate    DateTime
  meetingType    MeetingType
  venue          String
  startTime      DateTime
  endTime        DateTime
  chairperson    String
  attendees      String[]
  agenda         String
  quorumRequired Int
  quorumPresent  Int
  quorumAchieved Boolean
  minutes        String
  status         DocumentStatus
  attachments    String[]
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  companyId      String
  company        Company        @relation(fields: [companyId], references: [id])
  resolutions    Resolution[]
}

model ActionItem {
  id           String           @id @default(cuid())
  task         String
  assignee     String
  dueDate      DateTime
  status       ActionItemStatus
  discussionId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  discussion   Discussion       @relation(fields: [discussionId], references: [id])
}

model Discussion {
  id            String       @id @default(cuid())
  topic         String
  details       String
  decisions     String[]
  boardMinuteId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  actionItems   ActionItem[]
  boardMinute   BoardMinute  @relation(fields: [boardMinuteId], references: [id])
}

model BoardMinute {
  id          String         @id @default(cuid())
  minuteId    String         @unique
  meetingDate DateTime
  startTime   DateTime
  endTime     DateTime
  venue       String
  chairperson String
  attendees   String[]
  agenda      String
  minutes     String
  status      DocumentStatus
  attachments String[]
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
  discussions Discussion[]
  resolutions Resolution[]
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  entityType  String?
  entityId    String?
  description String
  user        String
  time        DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id])
  contacts    Contact[]    @relation("ContactActivities")
  deals       Deal[]       @relation("DealActivities")
  organisations Organisation[] @relation("OrganisationActivities")

  @@index([entityType, entityId])
  @@index([companyId])
  @@index([time])
}

model PrimaryContact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  role      String
  companyId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
}

// Enums
enum Status {
  Active
  Inactive
  Archived
}

enum DocumentStatus {
  Draft
  Final
  Signed
}

enum DirectorStatus {
  Active
  Resigned
}

enum ShareType {
  Ordinary
  Preferential
  Deferred
}

enum PaymentStatus {
  Pending
  Paid
  Partially_Paid
  Failed
}

enum ResolutionType {
  Ordinary
  Special
}

enum ResolutionOutcome {
  Passed
  Rejected
  Pending
  Deferred
}

enum MeetingType {
  AGM
  EGM
  Class_Meeting
}

enum ActionItemStatus {
  Pending
  In_Progress
  Completed
}

enum ActivityType {
  appointment
  resignation
  update
  removal
  added
  updated
  removed
  status_changed
}

enum RoleScope {
  Global
  Company
  Team
}

enum RoleStatus {
  Active
  Inactive
  Deprecated
}

enum PlanStatus {
  Active
  Inactive
  Deprecated
}

enum AccessLevel {
  None
  Read
  Write
  Admin
}

enum UserStatus {
  Active
  Inactive
  Pending
  Suspended
}

enum InvoiceStatus {
  Draft
  Pending
  Paid
  Overdue
  Cancelled
}
