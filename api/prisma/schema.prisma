generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String        @id @default(uuid())
  title         String?
  firstName     String
  lastName      String
  email         String        @unique
  password      String?
  phone         String?
  avatar        String?
  jobTitle      String?
  department    String?
  lastLogin     DateTime?
  invitedBy     String?
  invitedAt     DateTime?
  joinedAt      DateTime?
  status        UserStatus    @default(Pending)
  planId        String?       // Added: User's selected plan
  billingCompanyId String?    // Added: Company selected for billing
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roles         UserRole[]
  createdCompanies Company[]  @relation("CreatedBy")
  userCompanies UserCompany[]
  createdRoles  Role[]       @relation("RoleCreatedBy")
  createdInvoices Invoice[]  @relation("InvoiceCreatedBy")
  notifications Notification[]
  preferences   UserPreference?
  securitySettings SecuritySettings?
  plan          Plan?        @relation(fields: [planId], references: [id])  // Added: Relation to Plan
  billingCompany Company?    @relation("UserBillingCompany", fields: [billingCompanyId], references: [id]) // Added: Relation to billing Company
}

model SecuritySettings {
  id                  String   @id @default(uuid())
  userId              String   @unique
  twoFactorEnabled    Boolean  @default(false)
  twoFactorMethod     String?  // app, sms, email
  passwordLastChanged DateTime?
  lastSecurityAudit   DateTime?
  user               User     @relation(fields: [userId], references: [id])
}

model UserPreference {
  id              String   @id @default(uuid())
  userId          String   @unique
  theme           String   @default("Light")
  language        String   @default("English")
  dateFormat      String   @default("DD/MM/YYYY")
  timeFormat      String   @default("24h")
  timezone        String   @default("UTC")
  emailDigest     Boolean  @default(true)
  pushNotifications Boolean @default(true)
  user            User     @relation(fields: [userId], references: [id])
}

// Role and Permission Management
model Permission {
  id          String           @id @default(uuid())
  name        String
  code        String           @unique
  description String
  module      String
  accessLevel AccessLevel
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@index([module])
  @@index([accessLevel])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  scope       RoleScope
  status      RoleStatus       @default(Active)
  isCustom    Boolean          @default(true)
  isSystem    Boolean          @default(false)
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById String?
  createdBy   User?           @relation("RoleCreatedBy", fields: [createdById], references: [id])
  companyId   String?
  company     Company?        @relation(fields: [companyId], references: [id])
  permissions RolePermission[]
  users       UserRole[]

  @@index([scope])
  @@index([status])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Company and Organization
model Company {
  id               String            @id @default(cuid())
  name             String
  legalName        String?
  registrationNumber String?
  vatNumber        String?
  status           Status            @default(Active)
  isPrimary        Boolean           @default(false)
  isMyOrg          Boolean           @default(false)
  tags             String[]          @default([])
  logo             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdById      String
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  userCompanies    UserCompany[]
  roles            Role[]
  activities       Activity[]
  allotments       Allotment[]
  beneficialOwners BeneficialOwner[]
  boardMinutes     BoardMinute[]
  charges          Charge[]
  directors        Director[]
  meetings         Meeting[]
  primaryContact   PrimaryContact?
  shares           Share[]
  shareholders     Shareholder[]
  billingDetails   BillingDetails?
  invoices         Invoice[]         @relation("CompanyInvoices")
  payments         Payment[]         @relation("CompanyPayments")
  billingForUsers  User[]           @relation("UserBillingCompany") // Added: Users who selected this company for billing
}

model UserCompany {
  userId     String
  companyId  String
  role       String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

// Billing and Payments
model Plan {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  price       Float
  billingCycle String    // Monthly, Yearly, etc.
  features    String[]
  maxUsers    Int
  maxCompanies Int
  status      PlanStatus @default(Active)
  isCustom    Boolean    @default(false)
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       User[]     // Added: Users on this plan

  @@index([status])
}

model BillingDetails {
  id            String   @id @default(uuid())
  companyId     String   @unique
  address       String
  city          String
  state         String
  country       String
  postalCode    String
  taxId         String?
  currency      String   @default("USD")
  paymentTerms  Int      @default(30) // Days
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  paymentMethods PaymentMethod[]
}

model PaymentMethod {
  id              String   @id @default(uuid())
  billingDetailsId String
  type            String   // card, bank, etc.
  provider        String   // stripe, paypal, etc.
  lastFour        String?
  expiryDate      DateTime?
  isDefault       Boolean  @default(false)
  status          Status   @default(Active)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  billingDetails  BillingDetails @relation(fields: [billingDetailsId], references: [id])
}

model Invoice {
  id          String   @id @default(uuid())
  number      String   @unique
  companyId   String
  amount      Float
  currency    String
  status      InvoiceStatus @default(Draft)
  dueDate     DateTime
  paidDate    DateTime?
  items       Json
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  company     Company  @relation("CompanyInvoices", fields: [companyId], references: [id])
  payments    Payment[]
}

model Payment {
  id          String   @id @default(uuid())
  invoiceId   String
  companyId   String
  amount      Float
  currency    String
  method      String
  status      PaymentStatus
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  company     Company  @relation("CompanyPayments", fields: [companyId], references: [id])
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // email, push, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

// Existing Statutory Models
model Director {
  id                 String         @id @default(cuid())
  title              String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  nationality        String
  address            String
  appointmentDate    DateTime
  resignationDate    DateTime?
  directorType       String
  occupation         String
  otherDirectorships String
  shareholding       String
  status             DirectorStatus
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  companyId          String
  company            Company        @relation(fields: [companyId], references: [id])
}

model Shareholder {
  id                 String   @id @default(cuid())
  title              String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  nationality        String
  address            String
  email              String
  phone              String
  ordinaryShares     Int
  preferentialShares Int
  dateAcquired       DateTime
  status             Status
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  companyId          String
  company            Company  @relation(fields: [companyId], references: [id])
}

model Share {
  id             String    @id @default(cuid())
  class          String
  type           ShareType
  nominalValue   Float
  currency       String
  votingRights   Boolean
  dividendRights Boolean
  transferable   Boolean
  totalIssued    Int
  status         Status
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  companyId      String
  company        Company   @relation(fields: [companyId], references: [id])
}

model BeneficialOwner {
  id                  String   @id @default(cuid())
  title               String
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  nationality         String
  address             String
  email               String
  phone               String
  natureOfControl     String[]
  ownershipPercentage Float
  registrationDate    DateTime
  status              Status
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  companyId           String
  company             Company  @relation(fields: [companyId], references: [id])
}

model Charge {
  id               String    @id @default(cuid())
  chargeId         String    @unique
  chargeType       String
  dateCreated      DateTime
  amount           Float
  currency         String
  chargor          String
  chargee          String
  description      String
  propertyCharged  String
  registrationDate DateTime
  status           String
  satisfactionDate DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  companyId        String
  company          Company   @relation(fields: [companyId], references: [id])
}

model Allotment {
  id                String        @id @default(cuid())
  allotmentId       String        @unique
  allotmentDate     DateTime
  shareClass        String
  numberOfShares    Int
  pricePerShare     Float
  currency          String
  allottee          String
  paymentStatus     PaymentStatus
  amountPaid        Float?
  paymentDate       DateTime?
  certificateNumber String?
  status            Status
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  companyId         String
  company           Company       @relation(fields: [companyId], references: [id])
}

model Resolution {
  id            String            @id @default(cuid())
  title         String
  type          ResolutionType?
  description   String
  outcome       ResolutionOutcome
  proposedBy    String?
  secondedBy    String?
  meetingId     String?
  boardMinuteId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  boardMinute   BoardMinute?      @relation(fields: [boardMinuteId], references: [id])
  meeting       Meeting?          @relation(fields: [meetingId], references: [id])
}

model Meeting {
  id             String         @id @default(cuid())
  meetingId      String         @unique
  meetingDate    DateTime
  meetingType    MeetingType
  venue          String
  startTime      DateTime
  endTime        DateTime
  chairperson    String
  attendees      String[]
  agenda         String
  quorumRequired Int
  quorumPresent  Int
  quorumAchieved Boolean
  minutes        String
  status         DocumentStatus
  attachments    String[]
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  companyId      String
  company        Company        @relation(fields: [companyId], references: [id])
  resolutions    Resolution[]
}

model ActionItem {
  id           String           @id @default(cuid())
  task         String
  assignee     String
  dueDate      DateTime
  status       ActionItemStatus
  discussionId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  discussion   Discussion       @relation(fields: [discussionId], references: [id])
}

model Discussion {
  id            String       @id @default(cuid())
  topic         String
  details       String
  decisions     String[]
  boardMinuteId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  actionItems   ActionItem[]
  boardMinute   BoardMinute  @relation(fields: [boardMinuteId], references: [id])
}

model BoardMinute {
  id          String         @id @default(cuid())
  minuteId    String         @unique
  meetingDate DateTime
  startTime   DateTime
  endTime     DateTime
  venue       String
  chairperson String
  attendees   String[]
  agenda      String
  minutes     String
  status      DocumentStatus
  attachments String[]
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
  discussions Discussion[]
  resolutions Resolution[]
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  entityType  String?
  entityId    String?
  description String
  user        String
  time        DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id])

  @@index([entityType, entityId])
  @@index([companyId])
  @@index([time])
}

model PrimaryContact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  role      String
  companyId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
}

// Enums
enum Status {
  Active
  Inactive
  Archived
}

enum DocumentStatus {
  Draft
  Final
  Signed
}

enum DirectorStatus {
  Active
  Resigned
}

enum ShareType {
  Ordinary
  Preferential
  Deferred
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
}

enum ResolutionType {
  Ordinary
  Special
}

enum ResolutionOutcome {
  Passed
  Rejected
  Pending
  Deferred
}

enum MeetingType {
  AGM
  EGM
  Class_Meeting
}

enum ActionItemStatus {
  Pending
  In_Progress
  Completed
}

enum ActivityType {
  appointment
  resignation
  update
  removal
  added
  updated
  removed
  status_changed
}

enum RoleScope {
  Global
  Company
  Team
}

enum RoleStatus {
  Active
  Inactive
  Deprecated
}

enum PlanStatus {
  Active
  Inactive
  Deprecated
}

enum AccessLevel {
  None
  Read
  Write
  Admin
}

enum UserStatus {
  Active
  Inactive
  Pending
  Suspended
}

enum InvoiceStatus {
  Draft
  Pending
  Paid
  Overdue
  Cancelled
}
